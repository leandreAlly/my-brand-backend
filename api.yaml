openapi: 3.0.0
info:
  version: "1.0.0"
  title: BLOG CRUD API
  description: "A simple blog API"
  contact:
    email: tuyambazeleandre@gmail.com

servers:
- url: 'http://localhost:3000'


MessageSchema:
   schemas:
     Message:
       type: object
       required:
         - name
         - email
         - message
       properties:
        id:
          type: string
          description: the id of message
        name:
          type: string
          description: the name of sender
        email:
          type: string
          description: email of sender 
        message: 
          type: string
          description: message content
       example:
          id: d5fE_asz
          name: Alexander K. Dewdney
          email:  Dewdney@yahho.com
          message: hello admin
          
#tagga:
   #name: Message
   #description: The Message managing API

paths:
  /api/message:
    get:
      summary: Returns the list of all the messages
      tags: [Message]
      responses:
        '200':
          description: List of message
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/MessageSchema/schemas/Message'
    
    post:
      summary: Send a message 
      tags: [Message]
      requestBody:
          required: true
          content:
              application/json:
                  schema:
                     $ref: '#/MessageSchema/schemas/Message'
      responses:
        '201':
          description: The Message was successfully created
          content:
            application/json:
              schema:
                $ref: '#/MessageSchema/schemas/Message'
        '400':
           description: Some server error

           #start
UserSchema:
   schemas:
     User:
       type: object
       required:
         - name
         - email
         - password
       properties:
        id:
          type: string
          description: the id of user
        name:
          type: string
          description: the name of user
        email:
          type: string
          description: email of user 
        password: 
          type: string
          description: oassword string
       example:
          id: d5fE_asz
          name: Alexander K. Dewdney
          email:  Dewdney@yahho.com
          password: hello admin
          
tags:
   name: User
   description: The User managing API

paths:
  /api/auth:
    get:
      summary: Returns the list of all the messages
      tags: [Message]
      responses:
        '200':
          description: List of message
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/MessageSchema/schemas/Message'
    
    post:
      summary: Send a message 
      tags: [Message]
      requestBody:
          required: true
          content:
              application/json:
                  schema:
                     $ref: '#/MessageSchema/schemas/Message'
      responses:
        '201':
          description: The Message was successfully created
          content:
            application/json:
              schema:
                $ref: '#/MessageSchema/schemas/Message'
        '400':
           description: Some server error














                    
components:
  securitySchemes:
    MyUserToken:
      name: Authorization
      type: apiKey
      in: header